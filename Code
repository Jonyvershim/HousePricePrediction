import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics
from sklearn.datasets import fetch_california_housing

housing = fetch_california_housing()

# Loading the dataset to a Pandas DataFrame
housing_dataframe = pd.DataFrame(housing.data, columns = housing.feature_names)

# Print First 5 rows of our DataFrame
housing_dataframe.head()

# add the target (price) column to the DataFrame
housing_dataframe['price'] = housing.target

"""print(housing_dataframe.head())"""

# checking the number of rows and Columns in the data frame
"""print(housing_dataframe.shape)"""

# check for missing values
"""print(housing_dataframe.isnull().sum())"""

# statistical measures of the dataset
"""housing_dataframe.describe()"""

correlation = housing_dataframe.corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':10}, cmap='Blues')

X = housing_dataframe.drop(['price'], axis=1)
Y = housing_dataframe['price']

"""print(X)
print(Y)"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)
#0.2 = 20% will be in testing data, so, other 0.8 (80%) will be training data, 80% for training and 20% for testing

"""print(X.shape, X_train.shape, X_test.shape)"""

# loading the model
model = XGBRegressor()

# training the model with X_train
model.fit(X_train, Y_train)

# accuracy for prediction on training data
training_data_prediction = model.predict(X_train)

"""print(training_data_prediction)"""
# R squared error
score_1 = metrics.r2_score(Y_train, training_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

"""
print("R squared error : ", score_1)
print('Mean absolute Error : ', score_2)
"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
"""plt.show()"""

X = housing_dataframe.drop(['price'], axis=1)
Y = housing_dataframe['price']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)
#0.2 = 20% will be in testing data, so, other 0.8 (80%) will be training data, 80% for training and 20% for testing

# loading the model
model = XGBRegressor()

# training the model with X_train
model.fit(X_train, Y_train)

# accuracy for prediction on training data
training_data_prediction = model.predict(X_train)

# R squared error
score_1 = metrics.r2_score(Y_train, training_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

# accuracy for prediction on test data
test_data_prediction = model.predict(X_test)

# R squared error
score_1 = metrics.r2_score(Y_test, test_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_test, test_data_prediction)

print("R squared error : ", score_1)
print('Mean absolute Error : ', score_2)
